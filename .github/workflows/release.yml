name: release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version number'
        required: true

env:
  RELEASE_FILE: RELEASE.txt

jobs:
  scan:
    name: scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Check formatting
      run: cargo fmt --all -- --check
    - name: Scan code
      run: |
        rustup component add clippy
        cargo clippy --all-targets --all-features -- -D warnings
  test:
    name: test (${{ matrix.name }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - name: "default"
          features: ""
    steps:
    - uses: actions/checkout@v1
    - name: install toolchain
      run: rustup default stable
    - name: install tools
      run: sudo apt-get install build-essential
    - name: execute unit tests
      run: cargo test ${{ matrix.features }}
  build:
    name: build (${{ matrix.name }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - name: "default"
          features: ""
    steps:
    - uses: actions/checkout@v1
    - name: install toolchain
      run: rustup default stable
    - name: install tools
      run: sudo apt-get install build-essential
    - name: build program
      run: cargo build --release --locked ${{ matrix.features }}

  tag:
    if: github.ref == 'refs/heads/master'
    needs: check
    name: tag and release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: create release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version }}
        release_name: ${{ github.event.inputs.version }}
        body: |
          Release ${{ github.event.inputs.version }}.
        draft: false
        prerelease: false
    - run: printf ${{ steps.create_release.outputs.upload_url }} > ${{ env.RELEASE_FILE }}
    - name: upload release data
      uses: actions/upload-artifact@v1.0.0
      with:
        name: RELEASE
        path: ${{ env.RELEASE_FILE }}

  publish-cratesio:
    needs: tag
    name: crates.io
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: get version
      id: get_version
      run: echo ::set-output name=VERSION::$(git tag --points-at HEAD --sort -version:refname | head -1)
    - name: install tools
      run: |
        sudo apt-get install build-essential
        rustup default stable
        pip install invoke
    - name: publish
      id: publish
      run: |
        invoke ci.update-version --version=${{ steps.get_version.outputs.VERSION }}
        cargo login ${{ secrets.CRATES_IO_TOKEN }}
        cargo publish --allow-dirty
