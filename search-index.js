var searchIndex = JSON.parse('{\
"wavefront_rs":{"doc":"<code>wavefront_rs</code> is a RUST implementation for parsing and …","t":[0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,13,4,13,3,6,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11],"n":["error","obj","GenericError","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","into","new","to_owned","to_string","try_from","try_into","type_id","entity","parser","writer","Comment","Entity","Face","FaceVertex","Format","Group","Line","MergingGroup","Mtllib","Object","Point","SmoothingGroup","Usemtl","Vertex","VertexNormal","VertexParameter","VertexTexture","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from","into","into","ne","ne","new","new_vtn","normal","texture","to_owned","to_owned","to_string","token","try_from","try_from","try_into","try_into","type_id","type_id","vertex","content","name","name","name","name","name","name","u","u","v","v","vertices","vertices","vertices","w","w","w","x","x","y","y","z","z","Parser","borrow","borrow_mut","from","into","read_line","read_to_end","try_from","try_into","type_id","Writer","borrow","borrow_mut","from","into","try_from","try_into","type_id","write"],"q":["wavefront_rs","","wavefront_rs::error","","","","","","","","","","","","","","","wavefront_rs::obj","","","wavefront_rs::obj::entity","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","wavefront_rs::obj::entity::Entity","","","","","","","","","","","","","","","","","","","","","","","wavefront_rs::obj::parser","","","","","","","","","","wavefront_rs::obj::writer","","","","","","","",""],"d":["","The obj module contains all the types that are used when …","An error type.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Error type constructor.","","","","","","Contains the entity types that are used when working with …","Contains logic to read entities from a <code>BufRead</code> that …","Contains the logic to transform entities to OBJ formatted …","","Contains all possible entities that can exist in an OBJ …","Face consists of an arbitrary number (whereas n &gt;= 3) of …","Describes a vertex in a face.","","","Line consists of an arbitrary number (whereas n &gt;= 2) of …","","","","The point entity contains a list of points in space. …","","","Vertex consists of <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> whereas <code>w</code> is optional. …","VertexNormal consists of <code>x</code>, <code>y</code>and <code>z</code>. The normal will …","VertexParameter consists of <code>u</code>, <code>v</code> and <code>w</code> whereas <code>v</code> and <code>w</code> are …","VertexTexture consists of <code>u</code>, <code>v</code> and <code>w</code> whereas <code>u</code> and <code>w</code> are …","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The normal of the vertex (optional).","The texture map info for the vertex (optional).","","","","","","","","","","","The vertex index itself.","","","","","","","","","","","","","","","","","","","","","","","","Will read from a given <code>BufRead</code> and parse entities.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Will read from the given <code>BufRead</code> until the first …","Will read from the given <code>BufRead</code>as long as it is not EOF. …","","","","Will write entities to a <code>Write</code> trait.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Writes the given entity to the given <code>Write</code> trait as OBJ …"],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,0,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,3,2,3,2,3,2,3,2,3,2,2,3,2,3,2,3,3,3,3,3,2,3,2,2,2,3,2,3,2,3,3,4,5,6,7,8,9,10,11,12,11,12,13,14,15,16,11,12,16,17,16,17,16,17,0,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["genericerror",3]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["str",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["entity",4]],[[["",0]],["facevertex",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["entity",4]],["bool",0]],[[["",0],["facevertex",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["format",6]]],[[]],[[]],[[]],[[["",0],["entity",4]],["bool",0]],[[["",0],["facevertex",3]],["bool",0]],[[["i64",0]]],[[["i64",0],["option",4,[["i64",0]]],["option",4,[["i64",0]]]]],null,null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["str",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["",0]],["result",4,[["entity",4],["box",3,[["error",8]]]]]],[[["",0]],["result",4,[["box",3,[["error",8]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["entity",4]],["result",4,[["box",3,[["error",8]]]]]]],"p":[[3,"GenericError"],[4,"Entity"],[3,"FaceVertex"],[13,"Comment"],[13,"Object"],[13,"Group"],[13,"SmoothingGroup"],[13,"MergingGroup"],[13,"Mtllib"],[13,"Usemtl"],[13,"VertexTexture"],[13,"VertexParameter"],[13,"Point"],[13,"Line"],[13,"Face"],[13,"Vertex"],[13,"VertexNormal"],[3,"Parser"],[3,"Writer"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};